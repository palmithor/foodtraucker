# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  backend_java:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          working_directory: ~/repo/backend_java
          keys:
          - v1-dependencies-{{ checksum "backend_java/pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: 
          working_directory: ~/repo/backend_java
          command: mvn dependency:go-offline

      - save_cache:
          working_directory: ~/repo/backend_java
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "backend_java/pom.xml" }}
        
      # run tests!
      - run: 
          name: Backend Tests
          working_directory: ~/repo/backend_java
          command: mvn integration-test

  webapp:
    docker:
      - image: circleci/node:6.10.3-browsers
      
    
    working_directory: ~/repo

    steps:
      - checkout
      
      - restore_cache:
          key: dependency-cache-{{ checksum "webapp/package.json" }}

      - run: 
          name: Install dependencies
          working_directory: ~/repo/webapp
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "webapp/package.json" }}
          paths:
            - webapp/node_modules
      
      - run: 
          name: run tests
          working_directory: ~/repo/webapp
          command: npm test

      - run: 
          name: build app
          working_directory: ~/repo/webapp
          command: npm run build

  backend_node:
    docker:
      - image: webpackcontrib/circleci-node8
      
    
    working_directory: ~/repo

    steps:
      - checkout
      
      - restore_cache:
          key: dependency-cache-{{ checksum "backend_node/package.json" }}

      - run: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      - run: echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      - run:
          name: Install yarn
          command: sudo apt-get update && sudo apt-get install yarn
          
      - run: 
          name: Install dependencies
          working_directory: ~/repo/backend_node
          command: yarn install

      - save_cache:
          key: dependency-cache-{{ checksum "backend_node/package.json" }}
          paths:
            - backend_node/node_modules
      
      - run: 
          name: build app
          working_directory: ~/repo/backend_node
          command: yarn build

      - run: 
          name: run tests
          working_directory: ~/repo/backend_node
          command: yarn test

  deploy_backend:
    docker:
      - image: webpackcontrib/circleci-jdk9-node6
    
    working_directory: ~/repo

    steps:
      - checkout

      - run: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      - run: echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      - run:
          name: Install yarn
          command: sudo apt-get update && sudo apt-get install yarn

      - run:
          name: install serverless
          command: npm install -g serverless

      - run:
          name: update apt repo
          command: sudo apt-get update
      
      - run:
          name: install maven
          command: sudo apt-get install maven

      - run:
          name: package backend
          shell: /bin/sh
          command: |
            sh package_backend.sh

      - deploy: 
          name: deploy master or develop
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              serverless deploy --stage prod 
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              serverless deploy
            fi

  deploy_webapp:
    docker:
      - image: circleci/node:6.10.3-browsers
      
    working_directory: ~/repo

    steps:
      - checkout
      
      - restore_cache:
          key: dependency-cache-{{ checksum "webapp/package.json" }}

      - run: 
          name: Install dependencies
          working_directory: ~/repo/webapp
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "webapp/package.json" }}
          paths:
            - webapp/node_modules

      - run: 
          name: build app
          working_directory: ~/repo/webapp
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npm run build              
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              npm run build-aws_test
            fi

      - deploy:
          name: Deploy master or develop to s3
          working_directory: ~/repo/webapp
          command: |
            sudo apt-get install awscli
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 sync ./dist s3://aws-website-foodtraucker-prod-ffxtv --delete
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              aws s3 sync ./dist s3://aws-website-foodtraucker-test-9th9a --delete
            fi
workflows:
  version: 2
  backend_and_frontend:
    jobs:
      - backend_node
      - backend_java
      - webapp
      - deploy_webapp:
          requires: 
            - webapp
      - deploy_backend:
          requires: 
            - backend_java
            - backend_node