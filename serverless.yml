# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: foodtraucker # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws

# you can overwrite defaults here
  stage: test
  region: eu-central-1
  profile: foodtraucker
  versionFunctions: false # for now when we are experimenting
  environment:
    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    TRUCKS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-trucks
    TRUCK_CHECKINS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-truck_checkins
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRUCKS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRUCK_CHECKINS_TABLE}
    - Effect: Allow
      Action: 
        - dynamodb:ListTables
      Resource: "*"

custom:
  stages:
    test:
      user-pool-arn: arn:aws:cognito-idp:eu-central-1:174046704947:userpool/eu-central-1_RxnIPPZui
    prod:
      user-pool-arn: arn:aws:cognito-idp:eu-central-1:174046704947:userpool/eu-central-1_xJ32dr9cL

package:
  individually: true

functions:
  signup:
    environment:
      NODE_ENV: ${opt:stage, self:provider.stage}
    runtime: nodejs6.10
    handler: auth.signup
    package:
      artifact: backend_node.zip
    # Having this event here below unfortunately creates a user pool if the stack is setup from scratch
    # events:
    #  - cognitoUserPool:
    #      pool: foodtraucker-${opt:stage, self:provider.stage}
    #      trigger: PostConfirmation
  updateUser:
    runtime: java8
    package:
      artifact: backend_java/target/foodtraucker.jar
    handler: com.foodtraucker.serverless.users.UpdateUserHandler
    events:
      - http:
          path: users/{id}
          method: get
          authorizer:
            arn: ${self:custom.stages.${opt:stage, self:provider.stage}.user-pool-arn}
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    UserTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
    TrucksTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRUCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id #GUID
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
    TruckCheckinsTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRUCK_CHECKINS_TABLE}
        AttributeDefinitions:
          - AttributeName: id #GUID
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1