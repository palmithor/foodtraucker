# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: foodtraucker # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws

# you can overwrite defaults here
  stage: test
  region: eu-central-1
  versionFunctions: false # for now when we are experimenting
  environment:
    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    TRUCKS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-trucks
    FOODTRUCK_CHECKINS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-foodtruck-checkins
    FOODTRUCK_USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-foodtruck-users
    FOODTRUCK_MENUS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-foodtruck-menus
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOODTRUCK_CHECKINS_TABLE}/stream/*
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRUCKS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOODTRUCK_USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOODTRUCK_CHECKINS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOODTRUCK_MENUS_TABLE}
    - Effect: Allow
      Action: 
        - dynamodb:ListTables
      Resource: "*"    

custom:
  stages:
    test:
      user-pool-arn: arn:aws:cognito-idp:eu-central-1:174046704947:userpool/eu-central-1_RxnIPPZui
    prod:
      user-pool-arn: arn:aws:cognito-idp:eu-central-1:174046704947:userpool/eu-central-1_xJ32dr9cL

package:
  individually: true

functions:
  cognito-post-confirmation:
    environment:
      NODE_ENV: ${opt:stage, self:provider.stage}
    runtime: nodejs6.10
    package:
      artifact: backend_node/packages/cognito-post-confirmation/cognito-post-confirmation.zip
    handler: index.handler
  updateUser:
    runtime: java8
    package:
      artifact: backend_java/target/foodtraucker.jar
    handler: com.foodtraucker.serverless.users.UpdateUserHandler
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer:
            arn: ${self:custom.stages.${opt:stage, self:provider.stage}.user-pool-arn}
          request:
            parameters:
              paths:
                id: true
  api-gw-post-checkins:
    runtime: nodejs6.10
    package:
      artifact: backend_node/packages/api-gw-post-checkins/api-gw-post-checkins.zip
    handler: index.handler
    environment:
      NODE_ENV: ${opt:stage, self:provider.stage}
    events:
      - http:
          path: foodtrucks/{id}/checkins
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.stages.${opt:stage, self:provider.stage}.user-pool-arn}
          request:
            parameters:
              paths:
                id: true
  dynamodb-stream-checkins:
    runtime: nodejs6.10
    package:
      artifact: backend_node/packages/dynamodb-stream-checkins/dynamodb-stream-checkins.zip
    environment:
      NODE_ENV: ${opt:stage, self:provider.stage}
    handler: index.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 20
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - FoodtruckCheckinsTableDynamoDB
              - StreamArn
  addMenu:
    runtime: java8
    package:
      artifact: backend_java/target/foodtraucker.jar
    handler: com.foodtraucker.serverless.menus.AddFoodtruckMenuHandler
    events:
      - http:
          path: foodtrucks/{id}/menus
          method: post
          cors: true
          request:
            parameters:
              paths:
                id: true
resources:
  Resources:
    UserTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: cognito_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: cognito_id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
    TrucksTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRUCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
    FoodtruckCheckinsTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FOODTRUCK_CHECKINS_TABLE}
        AttributeDefinitions:
          - AttributeName: foodtruck_id
            AttributeType: S
          - AttributeName: id # GUID
            AttributeType: S
        KeySchema:
          - AttributeName: foodtruck_id
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    FoodtruckUsersTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FOODTRUCK_USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: foodtruck_id
            AttributeType: S
          - AttributeName: cognito_id
            AttributeType: S
        KeySchema:
          - AttributeName: cognito_id
            KeyType: HASH
          - AttributeName: foodtruck_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1
    FoodtruckMenusTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FOODTRUCK_MENUS_TABLE}
        AttributeDefinitions:
          - AttributeName: foodtruck_id
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: foodtruck_id
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits:  1
          WriteCapacityUnits: 1

